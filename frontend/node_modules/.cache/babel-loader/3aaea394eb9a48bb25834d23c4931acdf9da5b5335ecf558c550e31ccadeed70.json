{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Загрузка информации о пользователе с сервера\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  //Загрузка карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  //Редактирование профиля\n  patchUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._getResponse);\n  }\n\n  //Добавление новой карточки\n  postNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n      method: \"POST\",\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._getResponse);\n  }\n\n  //Удаление карточки\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  //Постановка и снятие лайка\n\n  putLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  //Обновление аватара пользователя\n  patchAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar.avatar\n      })\n    }).then(this._getResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: `https://mesto.nomoreparties.co/v1/cohort-69`,\n  headers: {\n    authorization: \"cb71ea5d-eae9-486a-9280-2ec72db62187\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_getResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","then","getInitialCards","patchUserInfo","data","method","body","JSON","stringify","name","about","postNewCard","link","deleteCard","id","putLike","deleteLike","patchAvatar","avatar","api","authorization"],"sources":["/Users/mary/dev/pr12/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Загрузка информации о пользователе с сервера\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    }).then(this._getResponse);\n  }\n\n  //Загрузка карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    }).then(this._getResponse);\n  }\n\n  //Редактирование профиля\n  patchUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then(this._getResponse);\n  }\n\n  //Добавление новой карточки\n  postNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n      method: \"POST\",\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then(this._getResponse);\n  }\n\n  //Удаление карточки\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._getResponse);\n  }\n\n  //Постановка и снятие лайка\n\n  putLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: \"PUT\",\n      headers: this._headers,\n    }).then(this._getResponse);\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._getResponse);\n  }\n\n  //Обновление аватара пользователя\n  patchAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar.avatar,\n      }),\n    }).then(this._getResponse);\n  }\n}\n\nconst api = new Api({\n  baseUrl: `https://mesto.nomoreparties.co/v1/cohort-69`,\n  headers: {\n    authorization: \"cb71ea5d-eae9-486a-9280-2ec72db62187\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}